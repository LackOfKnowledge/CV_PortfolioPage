// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            String       @default("user")
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  cvDownloads     CvDownload[]
}

// Nowy model dla kategorii
model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  excerpt     String?
  thumbnail   String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  cvDownloads CvDownload[]

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CvDownload {
  id            String   @id @default(cuid())
  token         String   @unique
  email         String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  isValid       Boolean  @default(true)
  generatedById String
  generatedBy   User     @relation(fields: [generatedById], references: [id])
  postId        String?
  post          Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
}
model CvLink {
  id        String    @id @default(cuid())
  name      String    
  createdAt DateTime  @default(now())
  expiresAt DateTime  
  usedAt    DateTime? 
}